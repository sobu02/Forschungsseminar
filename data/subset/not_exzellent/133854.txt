RC4
RC4, ARC4 oder Arcfour ist eine Stromverschlüsselung, die mit Standards wie HTTPS, SSH 1 und WEP bzw. WPA weite Verbreitung gefunden hat. RC4 (Ron’s Code 4) wurde 1987 von Ronald L. Rivest entwickelt, ist eine Marke von RSA Security und ist offiziell geheim (Security by Obscurity). ARC4 (Alleged RC4) oder Arcfour geht auf eine anonyme Veröffentlichung von Quelltext im Jahr 1994 zurück und ist Open Source. Im Februar 2015 wurde mit RFC 7465 der Einsatz von RC4 im Rahmen von TLS verboten, da es erhebliche Sicherheitsmängel aufweist. == Beschreibung == Eine Zufallsfolge wird aus einem nur einmalig zu verwendenden Schlüssel erzeugt. Der Klartext wird Bit für Bit per XOR mit der Zufallsfolge verknüpft, um die Daten zu verschlüsseln. Der Zufallsgenerator verwendet eine sogenannte S-Box, eine zufällig gewählte Permutation oder Substitution der Zahlen 0 bis 255. Die S-Box wird in einem ersten Schritt aus dem geheimen Schlüssel berechnet und anschließend zur Berechnung der Zufallsfolge verwendet. Nach jedem Berechnungsschritt werden zwei Werte der S-Box vertauscht. Die Sicherheit eines solchen Verfahrens ist nur gewährleistet, wenn sich die Zufallsfolge nicht wiederholt. Daher darf der Schlüssel bzw. das Passwort nur einmalig verwendet werden. Für die Besetzung der S-Box und die Werte zweier weiterer Variablen gibt es ca. 21684 Möglichkeiten, was einer Schlüssellänge von 210 (1684/8) Zeichen entsprechen würde. Nach dem Geburtstagsparadoxon ist zu erwarten, dass es Schlüssel mit einer Schlüssellänge von ((1684/2)/8) 105 Zeichen gibt, die identische Permutationen der S-Box erzeugen. Bekannt sind mittlerweile mindestens zwei 24 Zeichen (192 Bit) lange Schlüssel, die zur gleichen Permutation der S-Box führen. Damit gibt es zwei verschiedene Schlüssel, die zur gleichen Verschlüsselungsfolge führen.Mitsuru Matsui: Key Collisions of the RC4 Stream Cipher. Fast Software Encryption, 2009. In: Lecture Notes. In: Computer Science, Nummer 5665, Springer Verlag, 2009, S. 38–50, Präsentation (PDF; 267 kB; englisch) Der Algorithmus ist sehr einfach mit praktisch jeder Hard- und Software zu implementieren und sehr effizient berechenbar. Im WEP wurde der einmalige Schlüssel durch einfaches Zusammensetzen eines festen geheimen Schlüssels und eines Session Key bestimmt. In diesem Fall ist es jedoch möglich, den festen geheimen Schlüssel abzuleiten. Falls der Schlüssel mit einer Hashfunktion quasi zufällig gewählt wird, kann der RC4 aber weiterhin als sicher betrachtet werden. Bei Microsoft-Windows-Systemen, welche an eine NT-Domäne angebunden sind, wird das Anmeldepasswort, welches der Benutzer in der GINA-Oberfläche eingibt, nach vorangegangener Aushandlung eines Schlüssels per RC4-HMAC verschlüsselt und durch einen Kerberos-Frame an den Server übertragen. Die Aushandlung des Schlüssels findet während der Meldung „Netzwerkverbindungen werden vorbereitet“ statt. == Algorithmus == mini|Die Nachschlagephase von RC4 bei einem Alphabet der Größe eines Bytes. Das Ausgabebyte wird von den Werten S[i] und S[j] ausgewählt, diese werden addiert modulo 256 gerechnet. Kern des Verfahrens ist die sogenannte S-Box, eine zufällige Vertauschung oder Permutation des Standard-Alphabets (Byte-Werte 0–255). Mittels der S-Box wird eine Zufallsfolge erzeugt, die Bit für Bit durch Addition modulo 2, auch XOR-Verknüpfung genannt, mit dem Nachrichtenstrom verknüpft wird. Die S-Box wird zunächst als identische Abbildung vorbesetzt, so dass S[i] = i für i=0 bis 255 gilt. Die initiale Belegung der S-Box kann mit dem folgenden Pseudo-Code beschrieben werden. Die S-Box wird dabei aus dem Schlüssel k der Länge L Byte berechnet: k[]: gegebene Schlüssel-Zeichenfolge der Länge 5 bis 256 Byte L := Länge des Schlüssels in Byte s[]: Byte-Vektor der Länge 256 Für i = 0 bis 255 s[i] := i j := 0 Für i = 0 bis 255 j := (j + s[i] + k[i mod L]) mod 256 vertausche s[i] mit s[j] Die anschließende Berechnung der Zufallsfolge erfolgt analog: klar[]: gegebene Klartext-Zeichenfolge der Länge X schl[]: Vektor zum Abspeichern des Schlüsseltextes i := 0 j := 0 Für n = 0 bis X-1 i := (i + 1) mod 256 j := (j + s[i]) mod 256 vertausche s[i] mit s[j] zufallszahl := s[(s[i] + s[j]) mod 256] schl[n] := zufallszahl XOR klar[n] Zum Entschlüsseln verwendet man den gleichen Algorithmus, wobei der Schlüsseltext anstelle des Klartextes eingegeben wird. Zwei XOR-Verknüpfungen mit derselben Zufallszahl heben sich gegenseitig auf, und als Ausgabe entsteht wieder der Klartext. == Sicherheit == Wie jede Stromchiffre bietet auch RC4 keinen Integritätsschutz. Wenn ein Angreifer ein Bit einer verschlüsselten Nachricht ändert, so ändert er damit auch das gleiche Bit des Klartextes. Der erste praktische Angriff auf die RC4-Chiffre gelang Scott Fluhrer, Itsik Mantin und Adi Shamir im Jahr 2001. RSA Security empfahl daraufhin, die ersten 256 Bytes des Schlüsselstroms zu verwerfen. Andreas Klein verbesserte den Angriff, so dass er auch dann funktioniert, wenn die ersten 256 Byte verworfen werden. Er empfahl, die Ausgabe der ersten 12 Runden zu verwerfen. Anfang 2013 wurde ein neues Angriffsszenario von AlFardan, Bernstein, Paterson, Poettering und Schuldt vorgeschlagen, das statistische Auffälligkeiten in der Schlüsseltabelle von RC4 verwendet, um einen Klartext zu entschlüsseln, der über mehrere mit RC4 verschlüsselte TLS-Verbindungen übertragen wird. 2015 stellten Mathy Vanhoef und Frank Piessens einen praktisch durchführbaren Angriff auf RC4 vor, in dem Magic-Cookies innerhalb von 52 Stunden entschlüsselt werden konnten.Mathy Vanhoef, Frank Piessens: All Your Biases Belong To Us: Breaking RC4 in WPA- TKIP and TLS (PDF; 346 kB). Jacob Appelbaum ist der Ansicht, dass die NSA die RC4-Verschlüsselung in Echtzeit brechen könne. Bruce Schneier bezeichnete dies als eine plausible Vermutung. Die Europäische Agentur für Netz- und Informationssicherheit empfiehlt, RC4 durch Rabbit oder Snow 3G zu ersetzen. Auch das Bundesamt für Sicherheit in der Informationstechnik rät von der Verwendung von RC4 ab. So setzt beispielsweise die Deutsche Finanzagentur RC4 seit November 2013 nicht mehr ein. Die Internet Engineering Task Force verbietet mit dem RFC 7465 seit Februar 2015 den Einsatz von RC4, da die Verschlüsselung in der Praxis durch zu wenige Versuche knackbar geworden wäre und sie keine ausreichend hohe Sicherheit für TLS Sessions mehr zur Verfügung stellen könne. == Spritz == Am 27. Oktober 2014 stellten Ronald L. Rivest und Jacob C. N. Schuldt eine verbesserte Variante von RC4 namens Spritz vor. Sie zeigen dabei auch wie der Zufallsgenerator als kryptographische Hashfunktion genutzt werden kann. Allerdings wird die Performance von RC4 nicht erreicht. Der Algorithmus ist nur etwa halb so schnell wie RC4, und auch langsamer als die Blockchiffre Advanced Encryption Standard im Counter Mode. Die Schlüsselberechnung dauert länger als bei RC4. Es folgt eine kurze Gegenüberstellung der Kernstücke von RC4 und SPRITZ. RC4: i = i + 1 j = j + S[i] SWAP(S[i],S[j]) z = S[S[i] + S[j]] Return z SPRITZ: i = i + w j = k + S[j + S[i]] k = i + k + S[j] SWAP(S[i],S[j]) z = S[j + S[i + S[z + k]]] Return z Der Parameter w ist eine zu N teilerfremde Zahl, wobei N (meist 256) die Größe des Arrays S ist. Addiert wird immer modulo N. Nach N Iterationen hat i daher jeden Wert von 0 bis N-1 genau einmal angenommen. Jeder Wert in S wurde entsprechend mindestens einmal mit einer zufällig gewählten Position vertauscht. == Weblinks == * Überblick über Arbeiten bezüglich der Sicherheit von RC4 (englisch) * Original-Post des damals noch geheimen RC4-Algorithmus im Usenet (englisch) * Scott Fluhrer, Itsik Mantin, Adi Shamir: Weaknesses in the Key Scheduling Algorithm of RC4. (PDF; 297 kB; englisch) * A Stream Cipher Encryption Algorithm “Arcfour” (Internet Engineering Task Force Network Working Group 1997) * RFC 4345 – Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol == Einzelnachweise == Kategorie:Stromverschlüsselung Kategorie:Abkürzung 